{:rename-macros {}, :renames {}, :externs {Error {}, RegExp {}, Array {}}, :use-macros {}, :excludes #{contains? reverse replace}, :name superstring.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, set clojure.set, clojure.set clojure.set}, :cljs.spec/speced-vars [], :uses nil, :defs {mixed-case? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 591, :column 7, :end-line 591, :end-column 18, :arglists (quote ([s])), :doc "Return s if s contains both upper and lower case letters.\n\n  (mixed-case? \"foo1\") => nil\n  (mixed-case? \"Foo Bar\") => \"Foo Bar\""}, :name superstring.core/mixed-case?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 591, :end-line 591, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return s if s contains both upper and lower case letters.\n\n  (mixed-case? \"foo1\") => nil\n  (mixed-case? \"Foo Bar\") => \"Foo Bar\""}, ends-with? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 104, :column 7, :end-line 104, :end-column 17, :arglists (quote ([s suffix] [s suffix ignore-case])), :doc "Return s if s ends with suffix.\n\n  If a third argument is provided the string comparison is insensitive to case.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s suffix] [s suffix ignore-case]), :arglists ([s suffix] [s suffix ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/ends-with?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s suffix] [s suffix ignore-case]), :arglists ([s suffix] [s suffix ignore-case]), :arglists-meta (nil nil)}, :method-params ([s suffix] [s suffix ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 3, :fn-var true, :arglists ([s suffix] [s suffix ignore-case]), :doc "Return s if s ends with suffix.\n\n  If a third argument is provided the string comparison is insensitive to case."}, contains? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 328, :column 7, :end-line 328, :end-column 16, :arglists (quote ([s needle] [s needle ignore-case])), :doc "Return s if s contains needle.\n\n  (contains? \"foobar\" \"foo\") => \"foobar\"\n  (contains? \"foobar\" \"qux\") => nil", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needle] [s needle ignore-case]), :arglists ([s needle] [s needle ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/contains?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needle] [s needle ignore-case]), :arglists ([s needle] [s needle ignore-case]), :arglists-meta (nil nil)}, :method-params ([s needle] [s needle ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 3, :fn-var true, :arglists ([s needle] [s needle ignore-case]), :doc "Return s if s contains needle.\n\n  (contains? \"foobar\" \"foo\") => \"foobar\"\n  (contains? \"foobar\" \"qux\") => nil"}, collapse-whitespace {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 606, :column 7, :end-line 606, :end-column 26, :arglists (quote ([s])), :doc "Convert all adjacent whitespace in s to a single space."}, :name superstring.core/collapse-whitespace, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 26, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 606, :end-line 606, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Convert all adjacent whitespace in s to a single space."}, distance {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 638, :column 7, :end-line 638, :end-column 15, :arglists (quote ([s1 s2] [s1 s2 algorithm])), :doc "Get the edit distance between s1 and s2.\n\n  The default distance metric is the Levenshtein distance.\n\n  The optional algorithm argument can be either :levenshtein to get\n  the default, or :hamming to get the Hamming distance between s1 and\n  s2.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s1 s2] [s1 s2 algorithm]), :arglists ([s1 s2] [s1 s2 algorithm]), :arglists-meta (nil nil)}}, :name superstring.core/distance, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s1 s2] [s1 s2 algorithm]), :arglists ([s1 s2] [s1 s2 algorithm]), :arglists-meta (nil nil)}, :method-params ([s1 s2] [s1 s2 algorithm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 638, :end-line 638, :max-fixed-arity 3, :fn-var true, :arglists ([s1 s2] [s1 s2 algorithm]), :doc "Get the edit distance between s1 and s2.\n\n  The default distance metric is the Levenshtein distance.\n\n  The optional algorithm argument can be either :levenshtein to get\n  the default, or :hamming to get the Hamming distance between s1 and\n  s2."}, pad-left {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 238, :column 7, :end-line 238, :end-column 15, :arglists (quote ([s width] [s width padding])), :doc "Pad the beginning of s with padding, or spaces, until the length of\n  s matches width.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s width] [s width padding]), :arglists ([s width] [s width padding]), :arglists-meta (nil nil)}}, :name superstring.core/pad-left, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s width] [s width padding]), :arglists ([s width] [s width padding]), :arglists-meta (nil nil)}, :method-params ([s width] [s width padding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 3, :fn-var true, :arglists ([s width] [s width padding]), :doc "Pad the beginning of s with padding, or spaces, until the length of\n  s matches width."}, contains-any? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 362, :column 7, :end-line 362, :end-column 20, :arglists (quote ([s needles] [s needles ignore-case])), :doc "Return s if s contains any of the needles.\n\n  (contains-any? \"foo bar baz\" [\"foo\" \"qux\"]) => \"foo bar baz\"\n  (contains-any? \"foo bar\" [\"qux\" \"quux\"]) => nil", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needles] [s needles ignore-case]), :arglists ([s needles] [s needles ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/contains-any?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needles] [s needles ignore-case]), :arglists ([s needles] [s needles ignore-case]), :arglists-meta (nil nil)}, :method-params ([s needles] [s needles ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 3, :fn-var true, :arglists ([s needles] [s needles ignore-case]), :doc "Return s if s contains any of the needles.\n\n  (contains-any? \"foo bar baz\" [\"foo\" \"qux\"]) => \"foo bar baz\"\n  (contains-any? \"foo bar\" [\"qux\" \"quux\"]) => nil"}, capitalize {:name superstring.core/capitalize, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 9, :column 1, :end-line 9, :end-column 16, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 9, :column 6, :end-line 9, :end-column 16}}, char-at {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 517, :column 7, :end-line 517, :end-column 14, :arglists (quote ([s i])), :doc "Get the character in s at index i."}, :name superstring.core/char-at, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 14, :method-params ([s i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 517, :end-line 517, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s i])), :doc "Get the character in s at index i."}, reverse {:name superstring.core/reverse, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 14, :column 1, :end-line 14, :end-column 13, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 14, :column 6, :end-line 14, :end-column 13}}, join {:name superstring.core/join, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 10, :column 1, :end-line 10, :end-column 10, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 10, :column 6, :end-line 10, :end-column 10}}, split-words {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 449, :column 8, :end-line 449, :end-column 19, :private true, :arglists (quote ([s]))}, :private true, :name superstring.core/split-words, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 449, :end-line 449, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, starts-with? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 123, :column 7, :end-line 123, :end-column 19, :arglists (quote ([s prefix] [s prefix ignore-case])), :doc "Return s if s starts with prefix.\n\n  If a third argument is provided the string comparison is insensitive to case.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s prefix] [s prefix ignore-case]), :arglists ([s prefix] [s prefix ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/starts-with?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s prefix] [s prefix ignore-case]), :arglists ([s prefix] [s prefix ignore-case]), :arglists-meta (nil nil)}, :method-params ([s prefix] [s prefix ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 3, :fn-var true, :arglists ([s prefix] [s prefix ignore-case]), :doc "Return s if s starts with prefix.\n\n  If a third argument is provided the string comparison is insensitive to case."}, escape {:name superstring.core/escape, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 12, :column 1, :end-line 12, :end-column 12, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 12, :column 6, :end-line 12, :end-column 12}}, snake-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 495, :column 7, :end-line 495, :end-column 17, :arglists (quote ([s])), :doc "Lower case s and use underscores to separate words.\n\n  foo bar => foo_bar\n  camelCase => camel_case\n  PascalCase => pascal_case"}, :name superstring.core/snake-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 495, :end-line 495, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Lower case s and use underscores to separate words.\n\n  foo bar => foo_bar\n  camelCase => camel_case\n  PascalCase => pascal_case"}, screaming-snake-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 506, :column 7, :end-line 506, :end-column 27, :arglists (quote ([s])), :doc "Upper case s and use underscores to separate words.\n\n  foo bar => FOO_BAR\n  camelCase => CAMEL_CASE\n  PascalCase => PASCAL_CASE"}, :name superstring.core/screaming-snake-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 27, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 506, :end-line 506, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Upper case s and use underscores to separate words.\n\n  foo bar => FOO_BAR\n  camelCase => CAMEL_CASE\n  PascalCase => PASCAL_CASE"}, equals-ignore-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 97, :column 8, :end-line 97, :end-column 26, :private true, :arglists (quote ([s1 s2]))}, :private true, :name superstring.core/equals-ignore-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 26, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2]))}, last-index-of {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 47, :column 7, :end-line 47, :end-column 20, :arglists (quote ([s needle] [s needle start])), :doc "Searching backwards, return the starting position of the last occurrence of\n  needle in s or nil.\n\n  If start is provided, start the search at that position in s.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needle] [s needle start]), :arglists ([s needle] [s needle start]), :arglists-meta (nil nil)}}, :name superstring.core/last-index-of, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needle] [s needle start]), :arglists ([s needle] [s needle start]), :arglists-meta (nil nil)}, :method-params ([s needle] [s needle start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 3, :fn-var true, :arglists ([s needle] [s needle start]), :doc "Searching backwards, return the starting position of the last occurrence of\n  needle in s or nil.\n\n  If start is provided, start the search at that position in s."}, slug {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 571, :column 7, :end-line 571, :end-column 11, :arglists (quote ([s])), :doc "Transform s so it's suitable for use in URLs.\n\n  The following transformations are applied:\n\n  * Diacritical marks are removed from all characters.\n  * Any character which isn't alphanumeric or in #{_-.~} is removed.\n  * Lower case\n  * Whitespace is collapsed and replaced by a single dash."}, :name superstring.core/slug, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 571, :end-line 571, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Transform s so it's suitable for use in URLs.\n\n  The following transformations are applied:\n\n  * Diacritical marks are removed from all characters.\n  * Any character which isn't alphanumeric or in #{_-.~} is removed.\n  * Lower case\n  * Whitespace is collapsed and replaced by a single dash."}, common-prefix {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 394, :column 7, :end-line 394, :end-column 20, :arglists (quote ([s1 s2] [s1 s2 ignore-case])), :doc "Return the longest common prefix of s1 and s2.\n\n  (common-prefix \"abadon\" \"aberdeen\") => \"ab\"\n  (common-prefix \"foo\" \"bar\") => \"\"", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s1 s2] [s1 s2 ignore-case]), :arglists ([s1 s2] [s1 s2 ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/common-prefix, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s1 s2] [s1 s2 ignore-case]), :arglists ([s1 s2] [s1 s2 ignore-case]), :arglists-meta (nil nil)}, :method-params ([s1 s2] [s1 s2 ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 3, :fn-var true, :arglists ([s1 s2] [s1 s2 ignore-case]), :doc "Return the longest common prefix of s1 and s2.\n\n  (common-prefix \"abadon\" \"aberdeen\") => \"ab\"\n  (common-prefix \"foo\" \"bar\") => \"\""}, pascal-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 484, :column 7, :end-line 484, :end-column 18, :arglists (quote ([s])), :doc "Upper case the first char in s and use capitalization to separate words.\n\n  foo bar => FooBar\n  camelCase => CamelCase\n  PascalCase => PascalCase"}, :name superstring.core/pascal-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Upper case the first char in s and use capitalization to separate words.\n\n  foo bar => FooBar\n  camelCase => CamelCase\n  PascalCase => PascalCase"}, substring {:name superstring.core/substring, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 23, :column 1, :end-line 23, :end-column 15, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 23, :column 6, :end-line 23, :end-column 15}}, re-quote {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 314, :column 7, :end-line 314, :end-column 15, :arglists (quote ([s])), :doc "Return a string matching s exactly, and nothing else, for use in\n  regular expressions."}, :name superstring.core/re-quote, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return a string matching s exactly, and nothing else, for use in\n  regular expressions."}, common-suffix {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 416, :column 7, :end-line 416, :end-column 20, :arglists (quote ([s1 s2] [s1 s2 ignore-case])), :doc "Return the longest common suffix of s1 and s2.\n\n  (common-suffix \"bba\" \"aba\") => \"ba\"\n  (common-suffix \"foo\" \"bar\") => \"\"", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s1 s2] [s1 s2 ignore-case]), :arglists ([s1 s2] [s1 s2 ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/common-suffix, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s1 s2] [s1 s2 ignore-case]), :arglists ([s1 s2] [s1 s2 ignore-case]), :arglists-meta (nil nil)}, :method-params ([s1 s2] [s1 s2 ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 3, :fn-var true, :arglists ([s1 s2] [s1 s2 ignore-case]), :doc "Return the longest common suffix of s1 and s2.\n\n  (common-suffix \"bba\" \"aba\") => \"ba\"\n  (common-suffix \"foo\" \"bar\") => \"\""}, chop-prefix {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 291, :column 7, :end-line 291, :end-column 18, :arglists (quote ([s prefix] [s prefix ignore-case])), :doc "If found, remove prefix from the start of s.\n\n  Otherwise return s.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s prefix] [s prefix ignore-case]), :arglists ([s prefix] [s prefix ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/chop-prefix, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s prefix] [s prefix ignore-case]), :arglists ([s prefix] [s prefix ignore-case]), :arglists-meta (nil nil)}, :method-params ([s prefix] [s prefix ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 3, :fn-var true, :arglists ([s prefix] [s prefix ignore-case]), :doc "If found, remove prefix from the start of s.\n\n  Otherwise return s."}, contains-all? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 344, :column 7, :end-line 344, :end-column 20, :arglists (quote ([s needles] [s needles ignore-case])), :doc "Return s if s contains all needles.\n\n  (contains-all? \"foo bar baz\" [\"foo\" \"bar\"]) => \"foo bar baz\"\n  (contains-all? \"foo bar\" [\"qux\" \"bar\"]) => nil", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needles] [s needles ignore-case]), :arglists ([s needles] [s needles ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/contains-all?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needles] [s needles ignore-case]), :arglists ([s needles] [s needles ignore-case]), :arglists-meta (nil nil)}, :method-params ([s needles] [s needles ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 3, :fn-var true, :arglists ([s needles] [s needles ignore-case]), :doc "Return s if s contains all needles.\n\n  (contains-all? \"foo bar baz\" [\"foo\" \"bar\"]) => \"foo bar baz\"\n  (contains-all? \"foo bar\" [\"qux\" \"bar\"]) => nil"}, truncate {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 378, :column 7, :end-line 378, :end-column 15, :arglists (quote ([s len])), :doc "If s is longer than len-3, cut it down to len-3 and append '...'."}, :name superstring.core/truncate, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 15, :method-params ([s len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s len])), :doc "If s is longer than len-3, cut it down to len-3 and append '...'."}, replace {:name superstring.core/replace, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 13, :column 1, :end-line 13, :end-column 13, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 13, :column 6, :end-line 13, :end-column 13}}, lower-case? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 188, :column 7, :end-line 188, :end-column 18, :arglists (quote ([s])), :doc "Return s if s is all lower case.\n\n  Characters without case, e.g. numbers, are considered to be trivially\n  lower case."}, :name superstring.core/lower-case?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return s if s is all lower case.\n\n  Characters without case, e.g. numbers, are considered to be trivially\n  lower case."}, chomp {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 158, :column 7, :end-line 158, :end-column 12, :arglists (quote ([s] [s separator])), :doc "Return a new string with the given record separator removed from\n  the end (if present).\n\n  If separator is not provided, chomp will remove \\n, \\r or \\r\\n from\n  the end of s.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s separator]), :arglists ([s] [s separator]), :arglists-meta (nil nil)}}, :name superstring.core/chomp, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s separator]), :arglists ([s] [s separator]), :arglists-meta (nil nil)}, :method-params ([s] [s separator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s separator]), :doc "Return a new string with the given record separator removed from\n  the end (if present).\n\n  If separator is not provided, chomp will remove \\n, \\r or \\r\\n from\n  the end of s."}, split-lines {:name superstring.core/split-lines, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 16, :column 1, :end-line 16, :end-column 17, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 16, :column 6, :end-line 16, :end-column 17}}, lower-case {:name superstring.core/lower-case, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 11, :column 1, :end-line 11, :end-column 16, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 11, :column 6, :end-line 11, :end-column 16}}, lisp-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 460, :column 7, :end-line 460, :end-column 16, :arglists (quote ([s])), :doc "Lower case s and separate words with dashes.\n\n  foo bar => foo-bar\n  camelCase => camel-case\n\n  This is also referred to as kebab-case in some circles."}, :name superstring.core/lisp-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Lower case s and separate words with dashes.\n\n  foo bar => foo-bar\n  camelCase => camel-case\n\n  This is also referred to as kebab-case in some circles."}, pad-right {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 223, :column 7, :end-line 223, :end-column 16, :arglists (quote ([s width] [s width padding])), :doc "Pad the end of s with padding, or spaces, until the length of s matches\n  width.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s width] [s width padding]), :arglists ([s width] [s width padding]), :arglists-meta (nil nil)}}, :name superstring.core/pad-right, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s width] [s width padding]), :arglists ([s width] [s width padding]), :arglists-meta (nil nil)}, :method-params ([s width] [s width padding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 3, :fn-var true, :arglists ([s width] [s width padding]), :doc "Pad the end of s with padding, or spaces, until the length of s matches\n  width."}, trim-newline {:name superstring.core/trim-newline, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 18, :column 1, :end-line 18, :end-column 18, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 18, :column 6, :end-line 18, :end-column 18}}, slice-relative-to-end {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 63, :column 8, :end-line 63, :end-column 29, :private true, :arglists (quote ([s index length]))}, :private true, :name superstring.core/slice-relative-to-end, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 29, :method-params ([s index length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s index length]))}, chop {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 142, :column 7, :end-line 142, :end-column 11, :arglists (quote ([s])), :doc "Return a new string with the last character removed.\n\n  If the string ends with \\r\\n, both characters are removed.\n\n  Applying chop to an empty string is a no-op.\n\n  chomp is often a safer alternative, as it leaves the string\n  unchanged if it doesn’t end in a record separator."}, :name superstring.core/chop, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return a new string with the last character removed.\n\n  If the string ends with \\r\\n, both characters are removed.\n\n  Applying chop to an empty string is a no-op.\n\n  chomp is often a safer alternative, as it leaves the string\n  unchanged if it doesn’t end in a record separator."}, chop-suffix {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 274, :column 7, :end-line 274, :end-column 18, :arglists (quote ([s suffix] [s suffix ignore-case])), :doc "If found, remove suffix from the end of s.\n\n  Otherwise return s.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s suffix] [s suffix ignore-case]), :arglists ([s suffix] [s suffix ignore-case]), :arglists-meta (nil nil)}}, :name superstring.core/chop-suffix, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s suffix] [s suffix ignore-case]), :arglists ([s suffix] [s suffix ignore-case]), :arglists-meta (nil nil)}, :method-params ([s suffix] [s suffix ignore-case]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 3, :fn-var true, :arglists ([s suffix] [s suffix ignore-case]), :doc "If found, remove suffix from the end of s.\n\n  Otherwise return s."}, case-sensitive-contains {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 307, :column 8, :end-line 307, :end-column 31, :private true, :arglists (quote ([s needle]))}, :private true, :name superstring.core/case-sensitive-contains, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 31, :method-params ([s needle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s needle]))}, hamming-distance {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 632, :column 8, :end-line 632, :end-column 24, :private true, :arglists (quote ([s1 s2]))}, :private true, :name superstring.core/hamming-distance, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 24, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 632, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2]))}, longest-common-substring {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 661, :column 7, :end-line 661, :end-column 31, :arglists (quote ([s1 s2])), :doc "Returns the set of the longest common substrings in s1 and s2.\n\n  This implementation uses dynamic programming, and not a generalized\n  suffix tree, so the runtime is O(nm)."}, :name superstring.core/longest-common-substring, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 31, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 661, :end-line 661, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2])), :doc "Returns the set of the longest common substrings in s1 and s2.\n\n  This implementation uses dynamic programming, and not a generalized\n  suffix tree, so the runtime is O(nm)."}, gen-padding {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 212, :column 8, :end-line 212, :end-column 19, :private true, :arglists (quote ([s padding width])), :doc "Generate the necessary padding to fill s upto width."}, :private true, :name superstring.core/gen-padding, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 19, :method-params ([s padding width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s padding width])), :doc "Generate the necessary padding to fill s upto width."}, ascii? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 535, :column 7, :end-line 535, :end-column 13, :arglists (quote ([s])), :doc "Return s if s only contains ASCII characters."}, :name superstring.core/ascii?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return s if s only contains ASCII characters."}, center {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 253, :column 7, :end-line 253, :end-column 13, :arglists (quote ([s width] [s width padding])), :doc "Pad both ends of s with padding, or spaces, until the length of s\n  matches width.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s width] [s width padding]), :arglists ([s width] [s width padding]), :arglists-meta (nil nil)}}, :name superstring.core/center, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s width] [s width padding]), :arglists ([s width] [s width padding]), :arglists-meta (nil nil)}, :method-params ([s width] [s width padding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 3, :fn-var true, :arglists ([s width] [s width padding]), :doc "Pad both ends of s with padding, or spaces, until the length of s\n  matches width."}, levenshtein-distance {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 613, :column 8, :end-line 613, :end-column 28, :private true, :arglists (quote ([s1 s2]))}, :private true, :name superstring.core/levenshtein-distance, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 28, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 613, :end-line 613, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2]))}, swap-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 200, :column 7, :end-line 200, :end-column 16, :arglists (quote ([s])), :doc "Change lower case characters to upper case and vice versa."}, :name superstring.core/swap-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Change lower case characters to upper case and vice versa."}, upper-case {:name superstring.core/upper-case, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 21, :column 1, :end-line 21, :end-column 16, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 21, :column 6, :end-line 21, :end-column 16}}, split {:name superstring.core/split, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 15, :column 1, :end-line 15, :end-column 11, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 15, :column 6, :end-line 15, :end-column 11}}, char-equal-ignore-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 387, :column 8, :end-line 387, :end-column 30, :private true, :arglists (quote ([c1 c2]))}, :private true, :name superstring.core/char-equal-ignore-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 30, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2]))}, camel-case {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 472, :column 7, :end-line 472, :end-column 17, :arglists (quote ([s])), :doc "Lower case the first char in s and use capitalization to separate words.\n\n  foo bar => fooBar\n  camelCase => camelCase\n  PascalCase => pascalCase"}, :name superstring.core/camel-case, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Lower case the first char in s and use capitalization to separate words.\n\n  foo bar => fooBar\n  camelCase => camelCase\n  PascalCase => pascalCase"}, case-insensitive-contains {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 320, :column 8, :end-line 320, :end-column 33, :private true, :arglists (quote ([s needle]))}, :private true, :name superstring.core/case-insensitive-contains, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 33, :method-params ([s needle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s needle]))}, strip-accents {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 524, :column 7, :end-line 524, :end-column 20, :arglists (quote ([s])), :doc "Strip all accents (diacritical marks) from s.\n\n  Et ça sera sa moitié => Et ca sera sa moitie"}, :name superstring.core/strip-accents, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 524, :end-line 524, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Strip all accents (diacritical marks) from s.\n\n  Et ça sera sa moitié => Et ca sera sa moitie"}, slice {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 69, :column 7, :end-line 69, :end-column 12, :arglists (quote ([s index] [s index length])), :doc "Return a slice of s beginning at index and of the given length, or 1.\n\n  If index is negative the starting index is relative to the end of the string.\n\n  If the requested slice ends outside the string boundaries, we return\n  the substring of s starting at index.\n\n  Returns nil if index falls outside the string boundaries or if\n  length is negative.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s index] [s index length]), :arglists ([s index] [s index length]), :arglists-meta (nil nil)}}, :name superstring.core/slice, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s index] [s index length]), :arglists ([s index] [s index length]), :arglists-meta (nil nil)}, :method-params ([s index] [s index length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 3, :fn-var true, :arglists ([s index] [s index length]), :doc "Return a slice of s beginning at index and of the given length, or 1.\n\n  If index is negative the starting index is relative to the end of the string.\n\n  If the requested slice ends outside the string boundaries, we return\n  the substring of s starting at index.\n\n  Returns nil if index falls outside the string boundaries or if\n  length is negative."}, length {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 25, :column 7, :end-line 25, :end-column 13, :arglists (quote ([s])), :doc "Return the length of s."}, :name superstring.core/length, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return the length of s."}, trimr {:name superstring.core/trimr, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 20, :column 1, :end-line 20, :end-column 11, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 20, :column 6, :end-line 20, :end-column 11}}, index-of {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 32, :column 7, :end-line 32, :end-column 15, :arglists (quote ([s needle] [s needle start])), :doc "Return the starting position of the first occurrence of needle in s or nil.\n\n  If start is provided, start the search at that position in s.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needle] [s needle start]), :arglists ([s needle] [s needle start]), :arglists-meta (nil nil)}}, :name superstring.core/index-of, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s needle] [s needle start]), :arglists ([s needle] [s needle start]), :arglists-meta (nil nil)}, :method-params ([s needle] [s needle start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists ([s needle] [s needle start]), :doc "Return the starting position of the first occurrence of needle in s or nil.\n\n  If start is provided, start the search at that position in s."}, trim {:name superstring.core/trim, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 17, :column 1, :end-line 17, :end-column 10, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 17, :column 6, :end-line 17, :end-column 10}}, triml {:name superstring.core/triml, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 19, :column 1, :end-line 19, :end-column 11, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 19, :column 6, :end-line 19, :end-column 11}}, translate {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 545, :column 7, :end-line 545, :end-column 16, :arglists (quote ([s tmap] [s tmap delete-chars])), :doc "Translate all characters in s according to the mappings found in tmap.\n\n  Any characters found in the set delete-chars will be pruned prior to\n  consulting tmap.\n\n  Any characters mapping to nil in tmap will also be deleted.\n\n  (translate \"abba\" {\"a\" \"b\"}) => bbbb\n  (translate \"abba\" {\"a\" \"b\", \"b\" \"a\"}) => baab\n  (translate \"foo\" {\"a\" \"b\"}) =>  foo\n  (translate \"gabba\" {\"a\" \"b\"} #{\"b\"}) => gbb\n  (translate \"gabba\" {\\a nil} #{\\b}) => g", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s tmap] [s tmap delete-chars]), :arglists ([s tmap] [s tmap delete-chars]), :arglists-meta (nil nil)}}, :name superstring.core/translate, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s tmap] [s tmap delete-chars]), :arglists ([s tmap] [s tmap delete-chars]), :arglists-meta (nil nil)}, :method-params ([s tmap] [s tmap delete-chars]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 545, :end-line 545, :max-fixed-arity 3, :fn-var true, :arglists ([s tmap] [s tmap delete-chars]), :doc "Translate all characters in s according to the mappings found in tmap.\n\n  Any characters found in the set delete-chars will be pruned prior to\n  consulting tmap.\n\n  Any characters mapping to nil in tmap will also be deleted.\n\n  (translate \"abba\" {\"a\" \"b\"}) => bbbb\n  (translate \"abba\" {\"a\" \"b\", \"b\" \"a\"}) => baab\n  (translate \"foo\" {\"a\" \"b\"}) =>  foo\n  (translate \"gabba\" {\"a\" \"b\"} #{\"b\"}) => gbb\n  (translate \"gabba\" {\\a nil} #{\\b}) => g"}, upper-case? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 175, :column 7, :end-line 175, :end-column 18, :arglists (quote ([s])), :doc "Return s if s is all upper case.\n\n  Characters without case, e.g. numbers, are considered to be trivially\n  upper case."}, :name superstring.core/upper-case?, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return s if s is all upper case.\n\n  Characters without case, e.g. numbers, are considered to be trivially\n  upper case."}, wrap-words {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 432, :column 7, :end-line 432, :end-column 17, :arglists (quote ([s width])), :doc "Insert newlines in s so the length of each line doesn't exceed width."}, :name superstring.core/wrap-words, :variadic false, :file "resources/public/js/compiled/out/superstring/core.cljs", :end-column 17, :method-params ([s width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 432, :end-line 432, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s width])), :doc "Insert newlines in s so the length of each line doesn't exceed width."}, blank? {:name superstring.core/blank?, :file "resources/public/js/compiled/out/superstring/core.cljs", :line 8, :column 1, :end-line 8, :end-column 12, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/superstring/core.cljs", :line 8, :column 6, :end-line 8, :end-column 12}, :tag boolean}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else :ignore-case :not-found :len :res}, :order [:else :ignore-case :res :len :not-found]}, :doc nil}