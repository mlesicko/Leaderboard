{:rename-macros {}, :renames {}, :externs {XRegExp {}, Error {}}, :use-macros {}, :excludes #{regexp?}, :name cuerdas.regexp, :imports nil, :requires {cuerdas.vendor.xregexp cuerdas.vendor.xregexp, gstr goog.string, goog.string goog.string}, :cljs.spec/speced-vars [], :uses nil, :defs {xregexp {:name cuerdas.regexp/xregexp, :file "resources/public/js/compiled/out/cuerdas/regexp.cljc", :line 33, :column 4, :end-line 33, :end-column 26, :private true, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/cuerdas/regexp.cljc", :line 33, :column 19, :end-line 33, :end-column 26, :private true}, :tag js}, regexp? {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/cuerdas/regexp.cljc", :line 35, :column 7, :end-line 35, :end-column 14, :arglists (quote ([x])), :doc "Return `true` if `x` is a regexp pattern\n  instance."}, :name cuerdas.regexp/regexp?, :variadic false, :file "resources/public/js/compiled/out/cuerdas/regexp.cljc", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return `true` if `x` is a regexp pattern\n  instance."}, enhace {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/cuerdas/regexp.cljc", :line 42, :column 7, :end-line 42, :end-column 13, :arglists (quote ([re])), :doc "Enhace the regexp instance with unicode support. This is noop\n  in JVM because it already works perfectly with unicode."}, :name cuerdas.regexp/enhace, :variadic false, :file "resources/public/js/compiled/out/cuerdas/regexp.cljc", :end-column 13, :method-params ([re]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([re])), :doc "Enhace the regexp instance with unicode support. This is noop\n  in JVM because it already works perfectly with unicode."}, escape {:protocol-inline nil, :meta {:file "/home/captain/Development/Leaderboard/resources/public/js/compiled/out/cuerdas/regexp.cljc", :line 50, :column 7, :end-line 50, :end-column 13, :arglists (quote ([s])), :doc "Escapes characters in the string that are not safe\n   to use in a RegExp."}, :name cuerdas.regexp/escape, :variadic false, :file "resources/public/js/compiled/out/cuerdas/regexp.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Escapes characters in the string that are not safe\n   to use in a RegExp."}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A regexp helpers and enhancements (mostly for cljs)."}